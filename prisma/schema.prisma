// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ TABLE USERS (Utilisateurs) - ‚ú® MODIFI√âE POUR MULTI-PROFILS
model User {
  id                   Int      @id @default(autoincrement())
  email                String   @unique
  password             String
  name                 String
  role                 String   @default("USER") // USER ou ADMIN
  subscription_status  String   @default("INACTIVE") // ACTIVE, INACTIVE, EXPIRED
  preferencesCompleted Boolean  @default(false)
  active_profile_id    Int?     // ‚ú® NOUVEAU : Profil actif en session
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  // Relations
  subscriptions       Subscription[]
  watch_history       WatchHistory[]        // ‚ú® GARDE pour compatibilit√© (migration vers profils)
  favorites          Favorite[]            // ‚ú® GARDE pour compatibilit√© (migration vers profils)
  userPreferences    UserPreference[]      // ‚ú® GARDE pour compatibilit√© (migration vers profils)
  passwordResetTokens PasswordResetToken[]
  downloads          Download[]
  profiles           Profile[]             // ‚ú® NOUVEAU : Relation vers les profils
  active_profile     Profile?              @relation("ActiveProfile", fields: [active_profile_id], references: [id])

  @@map("users")
}

// üë®‚Äçüë©‚Äçüëß‚Äçüë¶ TABLE PROFILES (Profils famille) - ‚ú® NOUVEAU MULTI-PROFILS
model Profile {
  id        Int      @id @default(autoincrement())
  user_id   Int      // Propri√©taire du profil (compte principal)
  name      String   // Nom du profil (ex: "Papa", "Maman", "Lucas")
  avatar_url String? // Image du profil (optionnel)
  is_main   Boolean  @default(false) // Profil principal (migrate les donn√©es existantes)
  is_child  Boolean  @default(false) // Profil enfant (contr√¥le parental)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user              User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  favorites         ProfileFavorite[]
  watch_history     ProfileWatchHistory[]
  preferences       ProfilePreference[]
  active_users      User[]                 @relation("ActiveProfile") // ‚ú® Utilisateurs ayant ce profil actif

  @@map("profiles")
}

// üé¨ TABLE VIDEOS (Films/S√©ries) - ‚ú® MODIFI√âE POUR MULTI-PROFILS
model Video {
  id              Int      @id @default(autoincrement())
  title           String
  description     String   @db.Text
  duration        Int      // en minutes
  genre           String
  release_date    DateTime
  thumbnail_url   String
  video_file_path String
  views           Int      @default(0)
  rating          Float    @default(0.0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  watch_history         WatchHistory[]         // ‚ú® GARDE pour compatibilit√©
  favorites            Favorite[]             // ‚ú® GARDE pour compatibilit√©
  video_genres         VideoGenre[]
  downloads            Download[]
  profile_favorites    ProfileFavorite[]      // ‚ú® NOUVEAU : Favoris par profil
  profile_watch_history ProfileWatchHistory[] // ‚ú® NOUVEAU : Historique par profil

  @@map("videos")
}

// üí≥ TABLE SUBSCRIPTIONS (Abonnements)
model Subscription {
  id                        Int      @id @default(autoincrement())
  user_id                   Int
  plan_type                 String   // BASIC, PREMIUM, FAMILLE
  start_date                DateTime
  end_date                  DateTime
  status                    String   // ACTIVE, CANCELLED, EXPIRED, PENDING
  moneyfusion_subscription_id String? // R√©f√©rence MoneyFusion
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// üì∫ TABLE WATCH_HISTORY (Historique de visionnage) - ‚ú® GARDE pour compatibilit√©
model WatchHistory {
  id         Int      @id @default(autoincrement())
  user_id    Int
  video_id   Int
  watched_at DateTime @default(now())
  progress   Float    @default(0.0) // Pourcentage 0-100

  // Relations
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video Video @relation(fields: [video_id], references: [id], onDelete: Cascade)

  // Un utilisateur ne peut avoir qu'un seul historique par vid√©o
  @@unique([user_id, video_id])
  @@map("watch_history")
}

// üì∫ TABLE PROFILE_WATCH_HISTORY (Historique par profil) - ‚ú® NOUVEAU
model ProfileWatchHistory {
  id         Int      @id @default(autoincrement())
  profile_id Int
  video_id   Int
  watched_at DateTime @default(now())
  progress   Float    @default(0.0) // Pourcentage 0-100

  // Relations
  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  video   Video   @relation(fields: [video_id], references: [id], onDelete: Cascade)

  // Un profil ne peut avoir qu'un seul historique par vid√©o
  @@unique([profile_id, video_id])
  @@map("profile_watch_history")
}

// ‚ù§Ô∏è TABLE FAVORITES (Favoris) - ‚ú® GARDE pour compatibilit√©
model Favorite {
  id       Int      @id @default(autoincrement())
  user_id  Int
  video_id Int
  added_at DateTime @default(now())

  // Relations
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video Video @relation(fields: [video_id], references: [id], onDelete: Cascade)

  // Un utilisateur ne peut ajouter qu'une fois la m√™me vid√©o en favori
  @@unique([user_id, video_id])
  @@map("favorites")
}

// ‚ù§Ô∏è TABLE PROFILE_FAVORITES (Favoris par profil) - ‚ú® NOUVEAU
model ProfileFavorite {
  id         Int      @id @default(autoincrement())
  profile_id Int
  video_id   Int
  added_at   DateTime @default(now())

  // Relations
  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  video   Video   @relation(fields: [video_id], references: [id], onDelete: Cascade)

  // Un profil ne peut ajouter qu'une fois la m√™me vid√©o en favori
  @@unique([profile_id, video_id])
  @@map("profile_favorites")
}

// üîë TABLE PASSWORD_RESET_TOKENS (Tokens de r√©initialisation)
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  userId    Int?

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// üé≠ TABLE GENRES (Genres de films) - ‚ú® MODIFI√âE POUR MULTI-PROFILS
model Genre {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  icon        String   // emoji ou nom d'ic√¥ne
  color       String   // couleur hex pour le design
  createdAt   DateTime @default(now())
  
  // Relations
  userPreferences    UserPreference[]     // ‚ú® GARDE pour compatibilit√©
  videoGenres        VideoGenre[]
  profilePreferences ProfilePreference[]  // ‚ú® NOUVEAU : Pr√©f√©rences par profil
  
  @@map("genres")
}

// üë§üé≠ TABLE USER_PREFERENCES (Pr√©f√©rences utilisateur) - ‚ú® GARDE pour compatibilit√©
model UserPreference {
  id     String @id @default(cuid())
  userId Int
  genreId String
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  genre  Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  
  @@unique([userId, genreId])
  @@map("user_preferences")
}

// üé≠ TABLE PROFILE_PREFERENCES (Pr√©f√©rences par profil) - ‚ú® NOUVEAU
model ProfilePreference {
  id        String @id @default(cuid())
  profile_id Int
  genre_id   String
  
  // Relations
  profile Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  genre   Genre   @relation(fields: [genre_id], references: [id], onDelete: Cascade)
  
  @@unique([profile_id, genre_id])
  @@map("profile_preferences")
}

// üé¨üé≠ TABLE VIDEO_GENRES (Genres par vid√©o)
model VideoGenre {
  id      String @id @default(cuid())
  videoId Int
  genreId String
  
  // Relations
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  
  @@unique([videoId, genreId])
  @@map("video_genres")
}

// üì• TABLE DOWNLOADS (T√©l√©chargements) - ‚ú® FONCTIONNALIT√â OFFLINE
model Download {
  id              Int      @id @default(autoincrement())
  user_id         Int
  video_id        Int
  download_path   String   // Chemin du fichier t√©l√©charg√© chiffr√©
  original_title  String   // Titre du film pour affichage
  file_size       BigInt   // Taille du fichier en bytes
  download_date   DateTime @default(now())
  expires_at      DateTime // Date d'expiration (30 jours)
  is_expired      Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  video           Video    @relation(fields: [video_id], references: [id], onDelete: Cascade)

  @@unique([user_id, video_id]) // Un utilisateur ne peut t√©l√©charger qu'une fois le m√™me film
  @@map("downloads")
}